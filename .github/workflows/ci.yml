name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Basic syntax check
      run: |
        # Only check for critical syntax errors and undefined names
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Test with pytest
      env:
        PYTHONPATH: ${{ github.workspace }}/src
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  build-and-test-api:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test API functionality
      run: |
        # Test that the API can be imported and basic functionality works
        python -c "
        import sys
        sys.path.append('src')
        from api.main import app
        from fastapi.testclient import TestClient
        client = TestClient(app)
        response = client.get('/health')
        print(f'Health check status: {response.status_code}')
        "

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    
    - name: Install bandit
      run: |
        pip install bandit[toml]
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json

  model-training-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test data preprocessing
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from data.preprocessor import HousePricePreprocessor
        import pandas as pd
        import numpy as np
        
        # Test with synthetic data
        np.random.seed(42)
        test_data = pd.DataFrame({
            'MSSubClass': [60, 20, 70],
            'MSZoning': ['RL', 'RL', 'RM'],
            'LotArea': [8450, 9600, 10000],
            'OverallQual': [7, 6, 8],
            'GrLivArea': [1710, 1262, 1800],
            '1stFlrSF': [856, 1262, 900],
            '2ndFlrSF': [854, 0, 900],
            'YearBuilt': [2003, 1976, 2000],
            'YearRemodAdd': [2003, 1976, 2000]
        })
        
        preprocessor = HousePricePreprocessor()
        result = preprocessor.fit_transform(test_data)
        print('Preprocessing test passed!')
        print(f'Output shape: {result.shape}')
        "
    
    - name: Test model imports
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from models.ensemble_models import ModelTrainer
        print('Model imports successful!')
        
        # Test basic model creation
        trainer = ModelTrainer()
        models = trainer.get_base_models()
        print(f'Available models: {list(models.keys())}')
        "

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build-and-test-api, model-training-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build deployment package
      run: |
        mkdir -p deployment
        cp -r src/ deployment/
        cp requirements.txt deployment/
        echo "Deployment package created"
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment/