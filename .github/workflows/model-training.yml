name: Model Training Pipeline

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      retrain:
        description: 'Force model retraining'
        required: false
        default: 'false'

jobs:
  train-models:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check dataset availability
      run: |
        if [ -f "house-prices-advanced-regression-techniques/train.csv" ]; then
          echo "Dataset found"
          ls -la house-prices-advanced-regression-techniques/
        else
          echo "Dataset not found - creating synthetic data for testing"
          mkdir -p house-prices-advanced-regression-techniques
          python -c "
          import pandas as pd
          import numpy as np
          np.random.seed(42)
          
          # Create minimal synthetic dataset for testing
          data = {
              'Id': range(1, 101),
              'MSSubClass': np.random.choice([20, 30, 40, 50, 60, 70, 80, 90], 100),
              'MSZoning': np.random.choice(['A', 'C', 'FV', 'I', 'RH', 'RL', 'RP', 'RM'], 100),
              'LotArea': np.random.randint(5000, 15000, 100),
              'OverallQual': np.random.randint(1, 11, 100),
              'OverallCond': np.random.randint(1, 11, 100),
              'YearBuilt': np.random.randint(1950, 2020, 100),
              'YearRemodAdd': np.random.randint(1950, 2020, 100),
              'GrLivArea': np.random.randint(800, 3000, 100),
              '1stFlrSF': np.random.randint(400, 2000, 100),
              '2ndFlrSF': np.random.randint(0, 1500, 100),
              'FullBath': np.random.randint(1, 4, 100),
              'BedroomAbvGr': np.random.randint(1, 6, 100),
              'TotRmsAbvGrd': np.random.randint(3, 12, 100),
              'SalePrice': np.random.randint(50000, 500000, 100)
          }
          
          train_df = pd.DataFrame(data)
          test_df = train_df.drop('SalePrice', axis=1).iloc[:50]
          
          train_df.to_csv('house-prices-advanced-regression-techniques/train.csv', index=False)
          test_df.to_csv('house-prices-advanced-regression-techniques/test.csv', index=False)
          
          print('Synthetic dataset created for CI testing')
          "
        fi
    
    - name: Test model training pipeline
      run: |
        python -c "
        import sys
        sys.path.append('src')
        
        from data.preprocessor import load_and_preprocess_data
        from models.ensemble_models import ModelTrainer
        import logging
        
        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        train_path = 'house-prices-advanced-regression-techniques/train.csv'
        test_path = 'house-prices-advanced-regression-techniques/test.csv'
        
        try:
            logger.info('Loading and preprocessing data...')
            X_train, X_test, y_train = load_and_preprocess_data(train_path, test_path)
            
            logger.info('Testing model trainer...')
            trainer = ModelTrainer(random_state=42)
            models = trainer.get_base_models()
            
            # Test one simple model
            from sklearn.linear_model import Ridge
            simple_model = Ridge(alpha=1.0)
            simple_model.fit(X_train, y_train)
            predictions = simple_model.predict(X_test)
            
            logger.info('Model training pipeline test completed successfully!')
            print(f'Training data shape: {X_train.shape}')
            print(f'Test predictions shape: {predictions.shape}')
            
        except Exception as e:
            logger.error(f'Training pipeline test failed: {str(e)}')
            raise
        "
    
    - name: Generate model report
      run: |
        python -c "
        import json
        import os
        from datetime import datetime
        
        report = {
            'training_date': datetime.now().isoformat(),
            'training_status': 'pipeline_tested',
            'ci_test': True,
            'note': 'This was a CI pipeline test, not full model training'
        }
        
        os.makedirs('artifacts', exist_ok=True)
        with open('artifacts/ci_training_report.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        print('CI training report generated')
        "
    
    - name: Upload training report
      uses: actions/upload-artifact@v4
      with:
        name: ci-training-report
        path: artifacts/ci_training_report.json